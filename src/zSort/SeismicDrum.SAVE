/*
 *
 *
 */ 

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.*;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.*;

public class SeismicDrum extends JFrame {

    private Color panelBackgroundColor = new Color(220, 200, 180);

    private DisplayPanel displayPanel = null;

    public SeismicDrum() {              // Lay out the JFrame
        super("File Read: No File");
        setBackground( Color.BLUE);
        setLayout( new BorderLayout());
     // Add main display panel
        displayPanel = new DisplayPanel();
        displayPanel.setPreferredSize( new Dimension(1200,450) );
        add(displayPanel, BorderLayout.CENTER);

     // Add JMenuBar to this JFrame:
        //setJMenuBar(content.createMenuBar());
        setJMenuBar(createMenuBar());

     // Add the Control Panel to hold various button controls & sliders:
        ControlPanel controlPanel = new ControlPanel();
        controlPanel.setBackground(panelBackgroundColor);
        controlPanel.setPreferredSize( new Dimension(1200,100) );
        add(controlPanel, BorderLayout.SOUTH);

    } // end SeismicDrum() constructor

/**
 *  The main (seismic drum) display panel
 *  It knows how to draw itself
 *  It receives action events from any menu, slider, button, etc. and responds
 */
    public class DisplayPanel extends JPanel
                              implements ActionListener, ChangeListener{

        // constructor(s)
        public DisplayPanel(){
        }

        public void actionPerformed( ActionEvent evt) {
            String command = evt.getActionCommand();
            System.out.format("== command=[%s]\n", command);
        }

        public void stateChanged( ChangeEvent evt) {
            System.out.format("== changeEvent=[%s]\n", evt.getSource());
        }
    }


    public class ControlPanel extends JPanel {

        // constructor(s)
        public ControlPanel(){      // Layout the Control Panel

        // Set up the "Stop", "Play", "Pause" buttonPanel
            JPanel buttonPanel = new JPanel();
            buttonPanel.setBackground(panelBackgroundColor);

            JButton stop = new JButton("Stop");
            //stop.addActionListener(content);
            JButton pause = new JButton("Pause");
            //pause.addActionListener(content);
            JButton play = new JButton("Play");
            //play.addActionListener(content);
            play.setEnabled(false);

	        buttonPanel.add(stop);
            //buttonPanel.add(pause);
            buttonPanel.add(play);

        // Set up the "Horiz Scale", "Vert Gain", etc. JSlider Controls
            JSlider timeSlider = new JSlider(0, 400, 1);
            timeSlider.setValue(120);
            timeSlider.setBackground(panelBackgroundColor);
            timeSlider.setMajorTickSpacing(100);
            timeSlider.setMinorTickSpacing(25);
            timeSlider.setPaintTicks(true);
            //timeSlider.setLabelTable(timeSlider.createStandardLabels(25));
            timeSlider.setLabelTable(timeSlider.createStandardLabels(100));
            timeSlider.setPaintLabels(true);
            //timeSlider.addChangeListener(content);

            JSlider gainSlider = new JSlider(-100,100,1);
            gainSlider.setValue(0);
            gainSlider.setBackground(panelBackgroundColor);
            gainSlider.setMajorTickSpacing(100);
            gainSlider.setMinorTickSpacing(10);
            gainSlider.setPaintTicks(true);
            gainSlider.setLabelTable(gainSlider.createStandardLabels(100));
            gainSlider.setPaintLabels(true);
            //gainSlider.addChangeListener(content);

            JSlider speedSlider = new JSlider(0,1000,1);
            speedSlider.setMajorTickSpacing(250);
            speedSlider.setMinorTickSpacing(50);
            speedSlider.setLabelTable(speedSlider.createStandardLabels(250));
            speedSlider.setValue(1);
            speedSlider.setBackground(panelBackgroundColor);
            speedSlider.setPaintTicks(true);
            speedSlider.setPaintLabels(true);
            //speedSlider.addChangeListener(content);


        // Layout this Control Panel and add the various controls above
            setLayout( new GridLayout(2, 4, 50, 0));

            add( new JLabel("Controls", JLabel.CENTER) );
            add( new JLabel("Horiz Scale  [Secs/Div]", JLabel.CENTER) );
            add( new JLabel("Vert Gain", JLabel.CENTER) );
            add( new JLabel("Frame Delay [millisecs]", JLabel.CENTER) ); 
            //add( new JLabel("Frame Speed [1=dT --> 100=dT/100]", JLabel.CENTER) ); 
            add(buttonPanel);
            add(timeSlider);
            add(gainSlider);
            add(speedSlider);

        }
    }


      /**
       * Creates a menu bar for use with this panel.  It contains
       * four menus: "File, "Control", "Color", and "BackgroundColor".
       */
        public JMenuBar createMenuBar() {

            JMenuBar menuBar = new JMenuBar();

            JMenu fileMenu    = new JMenu("File");
            JMenu controlMenu = new JMenu("Control");
            JMenu colorMenu   = new JMenu("Color");
            JMenu bgColorMenu = new JMenu("BackgroundColor");
            menuBar.add(fileMenu);
            menuBar.add(controlMenu);
            menuBar.add(colorMenu);
            menuBar.add(bgColorMenu);

// Set up the main display panel to listen for all Action Events
            ActionListener listener = displayPanel;
         
            JMenuItem openText = new JMenuItem("Open (ASCII File)...");
            JMenuItem openSac = new JMenuItem("Open (Sac File)...");
            openSac.addActionListener(listener);
            openText.addActionListener(listener);
            fileMenu.add(openText);
            fileMenu.add(openSac);

            fileMenu.addSeparator();
            JMenuItem quitCommand = new JMenuItem("Quit");
            fileMenu.add(quitCommand);
            quitCommand.addActionListener(listener);

            JMenuItem undo = new JMenuItem("Undo");
            undo.addActionListener(listener);
            controlMenu.add(undo);
            JMenuItem clear = new JMenuItem("Clear");
            clear.addActionListener(listener);
            controlMenu.add(clear);
            JCheckBoxMenuItem axe = new JCheckBoxMenuItem("Draw Axes");
            axe.addActionListener(listener);
            controlMenu.add(axe);
            JCheckBoxMenuItem tics = new JCheckBoxMenuItem("Draw Tics");
            tics.addActionListener(listener);
            controlMenu.add(tics);
            JCheckBoxMenuItem grid = new JCheckBoxMenuItem("Draw Grid");
            grid.addActionListener(listener);
            controlMenu.add(grid);
            JMenuItem seisdraw = new JMenuItem("Draw Seis");
            seisdraw.addActionListener(listener);
            controlMenu.add(seisdraw);

            colorMenu.add(makeColorMenuItem("Black", Color.BLACK));
            colorMenu.add(makeColorMenuItem("White", Color.WHITE));
            colorMenu.add(makeColorMenuItem("Red", Color.RED));
            colorMenu.add(makeColorMenuItem("Green", Color.GREEN));
            colorMenu.add(makeColorMenuItem("Blue", Color.BLUE));
            colorMenu.add(makeColorMenuItem("Cyan", Color.CYAN));
            colorMenu.add(makeColorMenuItem("Magenta", Color.MAGENTA));
            colorMenu.add(makeColorMenuItem("Yellow", Color.YELLOW));
            JMenuItem customColor = new JMenuItem("Custom...");
            colorMenu.add(customColor);

            bgColorMenu.add(makeBgColorMenuItem("Black", Color.BLACK));
            bgColorMenu.add(makeBgColorMenuItem("White", Color.WHITE));
            bgColorMenu.add(makeBgColorMenuItem("Red", Color.RED));
            bgColorMenu.add(makeBgColorMenuItem("Green", Color.GREEN));
            bgColorMenu.add(makeBgColorMenuItem("Blue", Color.BLUE));
            bgColorMenu.add(makeBgColorMenuItem("Cyan", Color.CYAN));
            bgColorMenu.add(makeBgColorMenuItem("Magenta", Color.MAGENTA));
            bgColorMenu.add(makeBgColorMenuItem("Yellow", Color.YELLOW));
            JMenuItem customBgColor = new JMenuItem("Custom...");
            bgColorMenu.add(customBgColor);

            return menuBar;

        } // end createMenuBar


      /**
       * This utility method is used to create a JMenuItem that sets the
       * background color of the panel.
       * @param command  the text that will appear in the menu
       * @param color  the background color that is selected by this command.
       * @return  the JMenuItem that has been created.
       */
      private JMenuItem makeColorMenuItem(String command, final Color color) {
         JMenuItem item = new JMenuItem(command);
/**
         item.addActionListener( new ActionListener()  {
            public void actionPerformed(ActionEvent evt) {
               currentColor = color;
       // MTH: this is a hack to change the color of seis().
               for (CurveData curve : curves) {
                 curve.color = currentColor;
               }
               repaint();
            }
         });
**/
         return item;
      }

      private JMenuItem makeBgColorMenuItem(String command, final Color color) {
         JMenuItem item = new JMenuItem(command);
// This is an anonymous inner-class that extends ActionListener:
         item.addActionListener( new ActionListener()  {
            public void actionPerformed(ActionEvent evt) {
               setBackground(color);
            }
         });
         return item;
      }



    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event-dispatching thread.
     */
    private static void createAndShowGUI() {
        // Create and set up the window.
        JFrame frame = new SeismicDrum();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }

    public static void main(String[] args) {
        // Schedule a job for the event-dispatching thread:
        // creating and showing this application's GUI.
        // Note that a new anonymous inner-class that extends Runnable is declared below
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
}
